#ifndef REP_DEVICECONTROLLER_REPLICA_H
#define REP_DEVICECONTROLLER_REPLICA_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectpendingcall.h>
#include <QtRemoteObjects/qremoteobjectreplica.h>


class DeviceControllerReplica : public QRemoteObjectReplica
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "DeviceController")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "dac1624a10156ce82b65d1a7f82c945746e7f368")
    Q_PROPERTY(int imageWidth READ imageWidth NOTIFY imageWidthChanged)
    Q_PROPERTY(int imageHeight READ imageHeight NOTIFY imageHeightChanged)
    Q_PROPERTY(int lensFocus READ lensFocus NOTIFY lensFocusChanged)
    Q_PROPERTY(float sensorPixelSize READ sensorPixelSize NOTIFY sensorPixelSizeChanged)
    Q_PROPERTY(int availableFrameIds READ availableFrameIds NOTIFY availableFrameIdsChanged)
    Q_PROPERTY(QByteArray stereoCameraParameters READ stereoCameraParameters NOTIFY stereoCameraParametersChanged)
    Q_PROPERTY(QByteArray monoLeftCameraParameters READ monoLeftCameraParameters NOTIFY monoLeftCameraParametersChanged)
    Q_PROPERTY(QByteArray monoRightCameraParameters READ monoRightCameraParameters NOTIFY monoRightCameraParametersChanged)
    Q_PROPERTY(QByteArray rotationMatrix READ rotationMatrix NOTIFY rotationMatrixChanged)
    Q_PROPERTY(int ambientLight READ ambientLight NOTIFY ambientLightChanged)
    Q_PROPERTY(int smudgeStatus READ smudgeStatus NOTIFY smudgeStatusChanged)
    Q_PROPERTY(float frameRate READ frameRate NOTIFY frameRateChanged)

public:
    enum NodePort {
        Default = 9527,
    };
#if (QT_VERSION >= QT_VERSION_CHECK(5, 5, 0))
    Q_ENUM(NodePort)
#else
    Q_ENUMS(NodePort)
#endif

public:
    DeviceControllerReplica() : QRemoteObjectReplica() { initialize(); }
    static void registerMetatypes()
    {
        static bool initialized = false;
        if (initialized)
            return;
        initialized = true;
    }

private:
    DeviceControllerReplica(QRemoteObjectNode *node, const QString &name = QString())
        : QRemoteObjectReplica(ConstructWithNode)
    {
        initializeNode(node, name);
    }

    void initialize() override
    {
        DeviceControllerReplica::registerMetatypes();
        QVariantList properties;
        properties.reserve(12);
        properties << QVariant::fromValue(int());
        properties << QVariant::fromValue(int());
        properties << QVariant::fromValue(int());
        properties << QVariant::fromValue(float());
        properties << QVariant::fromValue(int());
        properties << QVariant::fromValue(QByteArray());
        properties << QVariant::fromValue(QByteArray());
        properties << QVariant::fromValue(QByteArray());
        properties << QVariant::fromValue(QByteArray());
        properties << QVariant::fromValue(int());
        properties << QVariant::fromValue(int());
        properties << QVariant::fromValue(float());
        setProperties(properties);
    }

public:
    virtual ~DeviceControllerReplica() {}

    static inline NodePort toNodePort(quint16 i, bool *ok = 0)
    {
        if (ok)
            *ok = true;
        switch (i) {
        case 9527: return Default;
        default:
            if (ok)
                *ok = false;
            return Default;
        }
    }
    int imageWidth() const
    {
        const QVariant variant = propAsVariant(0);
        if (!variant.canConvert<int>()) {
            qWarning() << "QtRO cannot convert the property imageWidth to type int";
        }
        return variant.value<int >();
    }

    int imageHeight() const
    {
        const QVariant variant = propAsVariant(1);
        if (!variant.canConvert<int>()) {
            qWarning() << "QtRO cannot convert the property imageHeight to type int";
        }
        return variant.value<int >();
    }

    int lensFocus() const
    {
        const QVariant variant = propAsVariant(2);
        if (!variant.canConvert<int>()) {
            qWarning() << "QtRO cannot convert the property lensFocus to type int";
        }
        return variant.value<int >();
    }

    float sensorPixelSize() const
    {
        const QVariant variant = propAsVariant(3);
        if (!variant.canConvert<float>()) {
            qWarning() << "QtRO cannot convert the property sensorPixelSize to type float";
        }
        return variant.value<float >();
    }

    int availableFrameIds() const
    {
        const QVariant variant = propAsVariant(4);
        if (!variant.canConvert<int>()) {
            qWarning() << "QtRO cannot convert the property availableFrameIds to type int";
        }
        return variant.value<int >();
    }

    QByteArray stereoCameraParameters() const
    {
        const QVariant variant = propAsVariant(5);
        if (!variant.canConvert<QByteArray>()) {
            qWarning() << "QtRO cannot convert the property stereoCameraParameters to type QByteArray";
        }
        return variant.value<QByteArray >();
    }

    QByteArray monoLeftCameraParameters() const
    {
        const QVariant variant = propAsVariant(6);
        if (!variant.canConvert<QByteArray>()) {
            qWarning() << "QtRO cannot convert the property monoLeftCameraParameters to type QByteArray";
        }
        return variant.value<QByteArray >();
    }

    QByteArray monoRightCameraParameters() const
    {
        const QVariant variant = propAsVariant(7);
        if (!variant.canConvert<QByteArray>()) {
            qWarning() << "QtRO cannot convert the property monoRightCameraParameters to type QByteArray";
        }
        return variant.value<QByteArray >();
    }

    QByteArray rotationMatrix() const
    {
        const QVariant variant = propAsVariant(8);
        if (!variant.canConvert<QByteArray>()) {
            qWarning() << "QtRO cannot convert the property rotationMatrix to type QByteArray";
        }
        return variant.value<QByteArray >();
    }

    int ambientLight() const
    {
        const QVariant variant = propAsVariant(9);
        if (!variant.canConvert<int>()) {
            qWarning() << "QtRO cannot convert the property ambientLight to type int";
        }
        return variant.value<int >();
    }

    int smudgeStatus() const
    {
        const QVariant variant = propAsVariant(10);
        if (!variant.canConvert<int>()) {
            qWarning() << "QtRO cannot convert the property smudgeStatus to type int";
        }
        return variant.value<int >();
    }

    float frameRate() const
    {
        const QVariant variant = propAsVariant(11);
        if (!variant.canConvert<float>()) {
            qWarning() << "QtRO cannot convert the property frameRate to type float";
        }
        return variant.value<float >();
    }


Q_SIGNALS:
    void imageWidthChanged(int imageWidth);
    void imageHeightChanged(int imageHeight);
    void lensFocusChanged(int lensFocus);
    void sensorPixelSizeChanged(float sensorPixelSize);
    void availableFrameIdsChanged(int availableFrameIds);
    void stereoCameraParametersChanged(QByteArray stereoCameraParameters);
    void monoLeftCameraParametersChanged(QByteArray monoLeftCameraParameters);
    void monoRightCameraParametersChanged(QByteArray monoRightCameraParameters);
    void rotationMatrixChanged(QByteArray rotationMatrix);
    void ambientLightChanged(int ambientLight);
    void smudgeStatusChanged(int smudgeStatus);
    void frameRateChanged(float frameRate);

public Q_SLOTS:
    void pushFrameRate(float frameRate)
    {
        static int __repc_index = DeviceControllerReplica::staticMetaObject.indexOfSlot("pushFrameRate(float)");
        QVariantList __repc_args;
        __repc_args << QVariant::fromValue(frameRate);
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }
    void controlTasks(int taskIds)
    {
        static int __repc_index = DeviceControllerReplica::staticMetaObject.indexOfSlot("controlTasks(int)");
        QVariantList __repc_args;
        __repc_args
            << QVariant::fromValue(taskIds)
        ;
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }
    void reboot(bool halt)
    {
        static int __repc_index = DeviceControllerReplica::staticMetaObject.indexOfSlot("reboot(bool)");
        QVariantList __repc_args;
        __repc_args
            << QVariant::fromValue(halt)
        ;
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }
    void enableMotionData(bool enabled)
    {
        static int __repc_index = DeviceControllerReplica::staticMetaObject.indexOfSlot("enableMotionData(bool)");
        QVariantList __repc_args;
        __repc_args
            << QVariant::fromValue(enabled)
        ;
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }
    QRemoteObjectPendingReply<int> getImuParameter(const QString & name)
    {
        static int __repc_index = DeviceControllerReplica::staticMetaObject.indexOfSlot("getImuParameter(QString)");
        QVariantList __repc_args;
        __repc_args
            << QVariant::fromValue(name)
        ;
        return QRemoteObjectPendingReply<int>(sendWithReply(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args));
    }
    void setImuParameter(const QString & name, int value)
    {
        static int __repc_index = DeviceControllerReplica::staticMetaObject.indexOfSlot("setImuParameter(QString,int)");
        QVariantList __repc_args;
        __repc_args
            << QVariant::fromValue(name)
            << QVariant::fromValue(value)
        ;
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
    Q_DECLARE_METATYPE(DeviceControllerReplica::NodePort)
#endif

inline QDataStream &operator<<(QDataStream &ds, const DeviceControllerReplica::NodePort &obj)
{
    quint16 val = obj;
    ds << val;
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, DeviceControllerReplica::NodePort &obj) {
    bool ok;
    quint16 val;
    ds >> val;
    obj = DeviceControllerReplica::toNodePort(val, &ok);
    if (!ok)
        qWarning() << "QtRO received an invalid enum value for typeNodePort, value =" << val;
    return ds;
}


QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_DEVICECONTROLLER_REPLICA_H
