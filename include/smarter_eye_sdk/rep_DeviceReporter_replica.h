#ifndef REP_DEVICEREPORTER_REPLICA_H
#define REP_DEVICEREPORTER_REPLICA_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectpendingcall.h>
#include <QtRemoteObjects/qremoteobjectreplica.h>


class DeviceReporterReplica : public QRemoteObjectReplica
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "DeviceReporter")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "fd44b7a6be9adbc2d7066ef7c1a1f2506dd71be1")
    Q_PROPERTY(int currentErrorCode READ currentErrorCode NOTIFY currentErrorCodeChanged)
    Q_PROPERTY(int updateProgress READ updateProgress NOTIFY updateProgressChanged)
    Q_PROPERTY(QString hardwareVersion READ hardwareVersion NOTIFY hardwareVersionChanged)

public:
    enum NodePort {
        Default = 9528,
    };
#if (QT_VERSION >= QT_VERSION_CHECK(5, 5, 0))
    Q_ENUM(NodePort)
#else
    Q_ENUMS(NodePort)
#endif

public:
    DeviceReporterReplica() : QRemoteObjectReplica() { initialize(); }
    static void registerMetatypes()
    {
        static bool initialized = false;
        if (initialized)
            return;
        initialized = true;
        qRegisterMetaType<QVector<int>>();
        qRegisterMetaTypeStreamOperators<QVector<int>>();

    }

private:
    DeviceReporterReplica(QRemoteObjectNode *node, const QString &name = QString())
        : QRemoteObjectReplica(ConstructWithNode)
    {
        initializeNode(node, name);
    }

    void initialize() override
    {
        DeviceReporterReplica::registerMetatypes();
        QVariantList properties;
        properties.reserve(3);
        properties << QVariant::fromValue(int());
        properties << QVariant::fromValue(int());
        properties << QVariant::fromValue(QString());
        setProperties(properties);
    }

public:
    virtual ~DeviceReporterReplica() {}

    static inline NodePort toNodePort(quint16 i, bool *ok = 0)
    {
        if (ok)
            *ok = true;
        switch (i) {
        case 9528: return Default;
        default:
            if (ok)
                *ok = false;
            return Default;
        }
    }
    int currentErrorCode() const
    {
        const QVariant variant = propAsVariant(0);
        if (!variant.canConvert<int>()) {
            qWarning() << "QtRO cannot convert the property currentErrorCode to type int";
        }
        return variant.value<int >();
    }

    int updateProgress() const
    {
        const QVariant variant = propAsVariant(1);
        if (!variant.canConvert<int>()) {
            qWarning() << "QtRO cannot convert the property updateProgress to type int";
        }
        return variant.value<int >();
    }

    QString hardwareVersion() const
    {
        const QVariant variant = propAsVariant(2);
        if (!variant.canConvert<QString>()) {
            qWarning() << "QtRO cannot convert the property hardwareVersion to type QString";
        }
        return variant.value<QString >();
    }


Q_SIGNALS:
    void currentErrorCodeChanged(int currentErrorCode);
    void updateProgressChanged(int updateProgress);
    void hardwareVersionChanged(QString hardwareVersion);
    void deviceStateChanged(int state, QVector<int> errorCodeList);
    void updateError(int updateError);

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
    Q_DECLARE_METATYPE(DeviceReporterReplica::NodePort)
#endif

inline QDataStream &operator<<(QDataStream &ds, const DeviceReporterReplica::NodePort &obj)
{
    quint16 val = obj;
    ds << val;
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, DeviceReporterReplica::NodePort &obj) {
    bool ok;
    quint16 val;
    ds >> val;
    obj = DeviceReporterReplica::toNodePort(val, &ok);
    if (!ok)
        qWarning() << "QtRO received an invalid enum value for typeNodePort, value =" << val;
    return ds;
}


QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_DEVICEREPORTER_REPLICA_H
